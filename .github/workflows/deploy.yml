name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20.19.0'

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    if: github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to staging server
        env:
          DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
          DEPLOY_HOST: ${{ secrets.STAGING_HOST }}
          DEPLOY_USER: ${{ secrets.STAGING_USER }}
        run: |
          echo "$DEPLOY_KEY" > deploy_key
          chmod 600 deploy_key
          rsync -avz --delete \
            -e "ssh -i deploy_key -o StrictHostKeyChecking=no" \
            ./dist/ ${DEPLOY_USER}@${DEPLOY_HOST}:/var/www/staging/

      - name: Run migrations
        run: |
          ssh -i deploy_key -o StrictHostKeyChecking=no \
            ${DEPLOY_USER}@${DEPLOY_HOST} \
            "cd /var/www/staging && npm run migrate:up"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    needs: [deploy-staging]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --production

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Run database backup
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        run: |
          npm run db:backup

      - name: Deploy with Docker
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login $DOCKER_REGISTRY -u $DOCKER_USERNAME --password-stdin
          docker build -t $DOCKER_REGISTRY/gastat-dossier:${{ github.sha }} .
          docker push $DOCKER_REGISTRY/gastat-dossier:${{ github.sha }}
          docker tag $DOCKER_REGISTRY/gastat-dossier:${{ github.sha }} $DOCKER_REGISTRY/gastat-dossier:latest
          docker push $DOCKER_REGISTRY/gastat-dossier:latest

      - name: Update production deployment
        env:
          DEPLOY_KEY: ${{ secrets.PROD_DEPLOY_KEY }}
          DEPLOY_HOST: ${{ secrets.PROD_HOST }}
          DEPLOY_USER: ${{ secrets.PROD_USER }}
        run: |
          echo "$DEPLOY_KEY" > deploy_key
          chmod 600 deploy_key
          ssh -i deploy_key -o StrictHostKeyChecking=no \
            ${DEPLOY_USER}@${DEPLOY_HOST} \
            "docker-compose pull && docker-compose up -d --remove-orphans"

      - name: Health check
        run: |
          sleep 30
          curl -f https://dossier.gastat.gov.sa/health || exit 1

      - name: Notify deployment
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Production deployment successful!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Rollback on failure
        if: failure()
        run: |
          ssh -i deploy_key -o StrictHostKeyChecking=no \
            ${DEPLOY_USER}@${DEPLOY_HOST} \
            "docker-compose down && docker-compose up -d --force-recreate"
