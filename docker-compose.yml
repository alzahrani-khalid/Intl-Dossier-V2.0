version: '3.8'

services:
  # PostgreSQL 15 with pgvector extension
  postgres:
    image: ankane/pgvector:v0.5.1-pg15
    container_name: intl_dossier_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: intl_dossier
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - intl_dossier_network

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: intl_dossier_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - intl_dossier_network

  # AnythingLLM for AI/ML operations
  anythingllm:
    image: mintplexlabs/anythingllm:latest
    container_name: intl_dossier_anythingllm
    environment:
      STORAGE_DIR: /app/server/storage
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_here_min_32_chars_long}
      LLM_PROVIDER: ${LLM_PROVIDER:-openai}
      EMBEDDING_MODEL_PROVIDER: ${EMBEDDING_MODEL_PROVIDER:-openai}
      VECTOR_DB_PROVIDER: native
      DISABLE_TELEMETRY: true
      SERVER_PORT: 3001
    volumes:
      - anythingllm_storage:/app/server/storage
    ports:
      - "3002:3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - intl_dossier_network
    depends_on:
      postgres:
        condition: service_healthy

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: intl_dossier_backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/intl_dossier
      REDIS_URL: redis://redis:6379
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      ANYTHINGLLM_API_URL: http://anythingllm:3001
      ANYTHINGLLM_API_KEY: ${ANYTHINGLLM_API_KEY}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_here_min_32_chars_long}
      API_PORT: 3000
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - intl_dossier_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      anythingllm:
        condition: service_healthy
    command: npm run dev

  # Frontend application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: intl_dossier_frontend
    environment:
      VITE_SUPABASE_URL: ${SUPABASE_URL}
      VITE_SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      VITE_API_URL: http://backend:3000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    networks:
      - intl_dossier_network
    depends_on:
      - backend
    command: npm run dev

  # Background worker for async tasks
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: intl_dossier_worker
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/intl_dossier
      REDIS_URL: redis://redis:6379
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      ANYTHINGLLM_API_URL: http://anythingllm:3001
      ANYTHINGLLM_API_KEY: ${ANYTHINGLLM_API_KEY}
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - intl_dossier_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      anythingllm:
        condition: service_healthy
    command: npm run worker

networks:
  intl_dossier_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  anythingllm_storage: