version: '3.8'

services:
  # Supabase Services
  postgres:
    image: supabase/postgres:15.1.0.117
    container_name: intake-postgres
    ports:
      - "54322:5432"
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  supabase-studio:
    image: supabase/studio:latest
    container_name: intake-studio
    ports:
      - "54323:3000"
    environment:
      STUDIO_PG_META_URL: http://postgres:5432
      POSTGRES_PASSWORD: postgres
    depends_on:
      - postgres

  supabase-kong:
    image: kong:2.8.1
    container_name: intake-kong
    ports:
      - "54321:8000"
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
    volumes:
      - ./docker/kong.yml:/var/lib/kong/kong.yml
    depends_on:
      - postgres

  # AnythingLLM for AI Services
  anythingllm:
    image: mintplexlabs/anythingllm:latest
    container_name: intake-anythingllm
    ports:
      - "3001:3001"
    volumes:
      - anythingllm_data:/app/server/storage
      - ./docker/anythingllm.env:/app/server/.env
    environment:
      STORAGE_DIR: /app/server/storage
      SERVER_PORT: 3001
      ENABLE_HTTPS: false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgvector Extension Setup
  pgvector-setup:
    image: pgvector/pgvector:pg15
    container_name: intake-pgvector-setup
    command: |
      sh -c "
        PGPASSWORD=postgres psql -h postgres -U postgres -d postgres -c 'CREATE EXTENSION IF NOT EXISTS vector;' &&
        PGPASSWORD=postgres psql -h postgres -U postgres -d postgres -c 'CREATE EXTENSION IF NOT EXISTS pg_trgm;' &&
        PGPASSWORD=postgres psql -h postgres -U postgres -d postgres -c 'CREATE EXTENSION IF NOT EXISTS btree_gin;'
      "
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: intake-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: intake-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    depends_on:
      - backend
      - frontend

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: intake-backend
    ports:
      - "4000:4000"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/postgres
      REDIS_URL: redis://redis:6379
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      anythingllm:
        condition: service_healthy
    command: npm run dev

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: intake-frontend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      VITE_SUPABASE_URL: http://localhost:54321
      VITE_SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    command: npm run dev

  # ClamAV for Virus Scanning (using mkodockx for ARM support)
  clamav:
    image: mkodockx/docker-clamav:alpine
    container_name: intake-clamav
    ports:
      - "3310:3310"
    volumes:
      - clamav_data:/var/lib/clamav
    environment:
      - CLAMD_STARTUP_TIMEOUT=1800

volumes:
  postgres_data:
  anythingllm_data:
  redis_data:
  prometheus_data:
  clamav_data:

networks:
  default:
    name: intake-network